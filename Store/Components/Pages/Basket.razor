@page "/basket"
@using DataEntities
@using Microsoft.AspNetCore.Authorization
@using Store.Services
@inject BasketService BasketService
@inject OrderingService OrderingService
@inject PaymentService PaymentService
@inject AuthenticationService AuthenticationService
@attribute [Authorize(Roles = "Administrator, User")]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<h1>Your Basket</h1>

@if (basketItems.Count == 0)
{
    <p>@message</p>
    <a href="/items">Why not buy something?</a>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in basketItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Price.ToString("0.00")</td>
                    <td>@item.Quantity</td>
                    <td>@(item.Price * item.Quantity).ToString("0.00")</td>
                    <td>
                        <!-- Remove button without EditForm -->
                        <form @formname="@GetFormName(item.ProductId)" method="post" @onsubmit="() => RemoveItem(item.ProductId)">
                            <AntiforgeryToken />
                            <button type="submit" class="btn btn-danger">Remove</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4"><strong>Grand Total:</strong></td>
                <td><strong>@basketItems.Sum(i => i.Price * i.Quantity).ToString("0.00")</strong></td>
            </tr>
        </tfoot>
    </table>

    <!-- Form for placing an order -->
    <EditForm Model="this" OnValidSubmit="PlaceOrder" FormName="place-order-form">
        <div class="form-group">
            <label>Select Payment Method:</label>
            <select class="form-control" @bind="selectedPaymentMethod">
                <option value="Card">Card</option>
                <option value="PayPal">PayPal</option>
            </select>
        </div>
        @if (selectedPaymentMethod == "Card")
        {
            <div class="form-group">
                <label for="cardNumber">Card Number:</label>
                <InputText type="text" class="form-control" id="cardNumber" @bind-Value="cardNumber" />
            </div>
        }
        <button type="submit" class="btn btn-primary">Place Order</button>
    </EditForm>

    @if (orderSuccess)
    {
        <p class="text-success">Order placed successfully!</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
}

@code {
    private string GetFormName(Guid productId) => $"deleteBasketItem-{productId}";

    private List<BasketItem> basketItems = new();
    private bool orderSuccess = false;
    private string? errorMessage;
    private Guid orderNumber = Guid.NewGuid();
    private string message = "Your basket is empty.";

    // Bind directly with @bind for parameters
    private string selectedPaymentMethod = "Card";  // Default selection

    [SupplyParameterFromForm]
    private string cardNumber { get; set; } = string.Empty;    // Card number for Card payments

    protected override async Task OnInitializedAsync()
    {
        // Example of getting basket items
        basketItems = await BasketService.GetBasketItemsAsync();
    }

    private async Task PlaceOrder()
    {
        try
        {
            // Validation of card number (if necessary)
            if (selectedPaymentMethod == "Card" && string.IsNullOrEmpty(cardNumber))
            {
                errorMessage = "Please enter a valid card number.";
                return;
            }

            orderSuccess = false;
            errorMessage = null;

            // Create order items from the basket
            var orderItems = basketItems.Select(item => new Store.Services.OrderItem(
                Id: item.ProductId,
                ProductName: item.Name,
                UnitPrice: item.Price,
                Units: item.Quantity,
                PictureUrl: item.PictureUrl
            )).ToArray();

            var userIdString = await AuthenticationService.GetUserIdAsync();

            if (Guid.TryParse(userIdString, out var userId))
            {
                var user = await AuthenticationService.GetUserByIdAsync(userId);

                if (user != null)
                {
                    var orderRecord = new OrderRecord(
                    OrderNumber: orderNumber,
                    Date: DateTime.UtcNow,
                    Status: "Pending",
                    City: user.city,
                    Country: user.country,
                    Street: user.address,
                    PostalCode: user.postcode,
                    ClientId: user.userid,
                    Total: basketItems.Sum(i => i.Price * i.Quantity),
                    OrderItems: orderItems
                     );

                    var requestId = Guid.NewGuid();

                    // Create the order
                    await OrderingService.CreateOrder(orderRecord, requestId);

                    // Simulate payment transaction creation based on the selected payment method
                    var paymentResult = await ProcessPayment();

                    if (paymentResult)
                    {
                        // Clear the basket after successful order and payment
                        basketItems.Clear();
                        await BasketService.ClearBasketAsync();
                        orderSuccess = true;
                        message = "successful";
                    }
                    else
                    {
                        errorMessage = "Payment failed. Please try again.";
                    }
                    Console.WriteLine($"User found: {user.username} ({user.email})");
                }
                else
                {
                    Console.WriteLine("User not found or an error occurred.");
                }
            }
            else
            {
                Console.WriteLine("Invalid user ID.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to place the order: {ex.Message}";
        }
    }

    private async Task<bool> ProcessPayment()
    {
        // Simulate payment logic based on selected payment method
        if (selectedPaymentMethod == "Card")
        {
            // Call the PaymentService for card payment
            return await PaymentService.CreatePayment(new Payment
                {
                    PaymentMethod = "Card",
                    orderid = orderNumber,
                    amount = basketItems.Sum(i => i.Price * i.Quantity),
                    paymentstatus = "pending",
                    CardNumber = cardNumber,
                    date = DateTime.UtcNow
                });
        }
        else if (selectedPaymentMethod == "PayPal")
        {
            // Call the PaymentService for PayPal payment
            return await PaymentService.CreatePayment(new Payment
                {
                    PaymentMethod = "PayPal"
                });
        }

        return false; // Default fail if no valid payment method selected
    }

    // Remove the item from the basket
    private async Task RemoveItem(Guid productId)
    {
        await BasketService.RemoveAsync(productId);
        // Refresh the basket after removal
        basketItems = await BasketService.GetBasketItemsAsync();
    }
}