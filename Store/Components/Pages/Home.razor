@page "/"
@using DataEntities
@using Microsoft.AspNetCore.OutputCaching
@using Store.Services
@inject ProductService ProductService
@inject BasketService BasketService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<div class="row">
    <div class="col-12">
        <h2 class="fw-bolder"><span class="text-danger">Welcome to the Store</span></h2>
    </div>
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <AuthorizeView>
                        <NotAuthorized>
                            <span>You are not logged in. Please <a class="fw-bolder" href="/login">click here</a> to login.</span>
                            <span>Or click here to register <a class="fw-bolder" href="/register">click here</a> to register.</span>
                        </NotAuthorized>
                        <Authorized>
                        <a class="btn btn-secondary" href="/basket">View Basket</a>
                        </Authorized>
                    </AuthorizeView>
                </div>
        </div>
    </div>
</div>
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td><img height="80" width="80" src="https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;

    private string imagePrefix = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        imagePrefix = Configuration["ImagePrefix"];
        products = await ProductService.GetProducts();
    }
}