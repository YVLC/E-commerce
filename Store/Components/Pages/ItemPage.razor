@page "/item/{itemId:int}"
@using System.Net
@using Microsoft.AspNetCore.Authorization
@using Store.Services
@using Store.WebAppComponents
@using static Store.Services.BasketService
@inject ProductService CatalogService
@inject BasketService BasketState
@inject NavigationManager Nav
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Administrator, User")]

@if (item is not null)
{
    <SectionContent SectionName="page-header-title">@item.Name</SectionContent>

    <div class="item-details">
        <div class="description">
            <p>@item.Description</p>
            <!-- Add the @formname attribute -->
            <form class="add-to-cart" @formname="addToCartForm" method="post" @onsubmit="HandleAddToCart">
                <AntiforgeryToken />
                <span class="price">$@item.Price.ToString("0.00")</span>

                @if (isLoggedIn)
                {
                    <button type="submit" title="Add to basket">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path id="Vector" d="M6 2L3 6V20C3 20.5304 3.21071 21.0391 3.58579 21.4142C3.96086 21.7893 4.46957 22 5 22H19C19.5304 22 20.0391 21.7893 20.4142 21.4142C20.7893 21.0391 21 20.5304 21 20V6L18 2H6Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            <path id="Vector_2" d="M3 6H21" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            <path id="Vector_3" d="M16 10C16 11.0609 15.5786 12.0783 14.8284 12.8284C14.0783 13.5786 13.0609 14 12 14C10.9391 14 9.92172 13.5786 9.17157 12.8284C8.42143 12.0783 8 11.0609 8 10" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        Add to shopping bag
                    </button>
                }
                else
                {
                    <button type="submit" title="Log in to purchase">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        Log in to purchase
                    </button>
                }
            </form>

            @if (numInCart > 0)
            {
                <p><strong>@numInCart</strong> in <a href="basket">shopping bag</a></p>
            }
        </div>
    </div>
}
else if (notFound)
{
    <div class="item-details">
        <p>Sorry, we couldn't find any such product.</p>
    </div>
}

@code {
    private Item? item;
    private int numInCart;
    private bool isLoggedIn;
    private bool notFound;

    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoggedIn = HttpContext?.User.Identity?.IsAuthenticated == true;
            item = await CatalogService.GetCatalogItem(ItemId);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            HttpContext!.Response.StatusCode = 404;
            notFound = true;
        }
    }

    private async Task HandleAddToCart()
    {
        // Prevent the form from submitting (refreshing the page)
        if (!isLoggedIn)
        {
            await JsRuntime.InvokeVoidAsync("alert", "You are not logged in. Please log in or register to continue.");
            return;
        }

        if (item is not null)
        {
            // Map the Item to BasketItem and add it to the basket
            var basketItem = MapItemToBasketItem(item);
            await BasketState.AddAsync(basketItem);
            await UpdateNumInCartAsync();
        }
    }

    private BasketItem MapItemToBasketItem(Item item)
    {
        // Map Item to BasketItem
        return new BasketItem
        {
            ProductId = item.Id,
            Name = item.Name,
            Price = item.Price,
            Quantity = 1, // Default to 1, you can change if needed
            PictureUrl = item.PictureUrl
        };
    }

    private async Task UpdateNumInCartAsync()
    {
        var items = await BasketState.GetBasketItemsAsync();
        numInCart = items.FirstOrDefault(row => row.ProductId == ItemId)?.Quantity ?? 0;
    }
}