@page "/login"
@using DataEntities
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Store.Services
@inject Store.Services.AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider // Injecting the custom AuthenticationStateProvider
@using System.Security.Claims

<div class="card">
    @if (isSuccessRedirect)
    {
        <div class="text-center">
            <img src="/images/successs.png" alt="Success" style="width: 100px; height: 100px;" />
            <p class="text-success">Product added successfully!</p>
            <a href="/" class="btn btn-success mt-3">Go to Main Page</a>
        </div>
    }
    else{
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnSubmit" FormName="login">
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
            </div>
            <br />
            <button type="submit" disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="/register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
    }
</div>

@code {


    [SupplyParameterFromForm]
    private Models.Login model { get; set; } = new();
    private bool loading;
    private bool isSuccessRedirect = false;

    private async Task OnSubmit()
    {
        loading = true; // Set loading state to true immediately after starting the submission
        try
        {
            // Call the login method and wait for the result
            var isSuccess = await AuthenticationService.Login(model.Email, model.Password);
            if (isSuccess != null)
            {
                // Sign in using the CustomAuthenticationStateProvider
                await AuthStateProvider.SignInAsync(model.Email, isSuccess.Role, isSuccess.UserId.ToString()); // Pass the role directly

                isSuccessRedirect = true;
                loading = false; // Reset loading state after processing
                StateHasChanged(); // Update the UI
            }
            else
            {
                // Handle failed login (e.g., show a message)
                Console.WriteLine("Login failed.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}